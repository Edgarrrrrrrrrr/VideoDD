[32m2025-03-16 17:21:45.496[0m | [1mINFO    [0m | [36m__main__[0m:[36mmain[0m:[36m101[0m - [1mHyper-parameters:
{'_wandb': {}, 'dataset': 'HMDB51', 'method': 'CF', 'model': 'ConvNet3D', 'data_path': '/root/autodl-tmp/Data', 'Iteration': 1500, 'eval_it': 500, 'eval_mode': 'SS', 'batch_syn': 51, 'ipc': 1, 'frames': 16, 'lr_teacher': 0.001, 'init': 'real', 'lr_video': 20.0, 'sampling_net': 1, 'lr_sampling_net': 0.01, 'alpha_for_loss': 0.5, 'beta_for_loss': 0.5, 'iter_calib': 0, 'calib_weight': 1, 'num_freqs': 1024, 'outer_loop': None, 'inner_loop': None, 'num_eval': 5, 'epoch_eval_train': 500, 'lr_net': 0.01, 'lr_lr': 1e-05, 'train_lr': False, 'batch_real': 64, 'batch_train': 256, 'expert_epochs': 3, 'syn_steps': 64, 'max_start_epoch': 25, 'dis_metric': 'ours', 'buffer_path': None, 'num_workers': 4, 'preload': True, 'save_path': './logged_files', 'device': 'cuda', 'distributed': False}[0m
[32m2025-03-16 17:21:45.496[0m | [1mINFO    [0m | [36m__main__[0m:[36mmain[0m:[36m102[0m - [1mEvaluation model pool: ['ConvNet3D'][0m
[32m2025-03-16 17:21:45.496[0m | [1mINFO    [0m | [36m__main__[0m:[36mmain[0m:[36m106[0m - [1mBUILDING DATASET[0m
5236it [00:00, 926640.33it/s]
[32m2025-03-16 17:21:45.671[0m | [1mINFO    [0m | [36m__main__[0m:[36mmain[0m:[36m145[0m - [1minitialize synthetic data from random real video[0m
torch.Size([51, 3, 16, 112, 112])
[32m2025-03-16 17:21:45.714[0m | [1mINFO    [0m | [36m__main__[0m:[36mmain[0m:[36m170[0m - [1mtraining begins[0m
[32m2025-03-16 17:21:45.715[0m | [1mINFO    [0m | [36m__main__[0m:[36mmain[0m:[36m175[0m - [1mËí∏È¶èÊï∞ÊçÆÈõÜÁöÑÂ∞∫ÂØ∏Ôºötorch.Size([51, 3, 16, 112, 112])[0m
[32m2025-03-16 17:21:45.715[0m | [1mINFO    [0m | [36m__main__[0m:[36mmain[0m:[36m176[0m - [1mËí∏È¶èÊï∞ÊçÆÈõÜÊ†áÁ≠æÁöÑÂ∞∫ÂØ∏Ôºötorch.Size([51])[0m
[32m2025-03-16 17:21:47.537[0m | [1mINFO    [0m | [36m__main__[0m:[36mmain[0m:[36m190[0m - [1muse the sampling_net[0m
[32m2025-03-16 17:21:47.566[0m | [1mINFO    [0m | [36m__main__[0m:[36mmain[0m:[36m224[0m - [1mUse CF method[0m
  0%|                                                                                                                                                  | 0/1501 [00:00<?, ?it/s][32m2025-03-16 17:21:47.567[0m | [1mINFO    [0m | [36m__main__[0m:[36mmain[0m:[36m227[0m - [1mÂΩìÂâçÂ≠¶‰π†Áéá: 20.0[0m
[32m2025-03-16 17:21:47.567[0m | [1mINFO    [0m | [36m__main__[0m:[36mmain[0m:[36m262[0m - [1mËøôÊ¨°ËÆ≠ÁªÉËΩÆÊï∞ÊòØ:0[0m
[32m2025-03-16 17:21:48.173[0m | [1mINFO    [0m | [36m__main__[0m:[36mmain[0m:[36m301[0m - [1mtÁöÑshapeÊòØ:torch.Size([64, 1024])[0m
  0%|                                                                                                                                                  | 0/1501 [00:00<?, ?it/s]
Traceback (most recent call last):
  File "/root/autodl-tmp/VideoDD/TzxDemo.py", line 492, in <module>
    main(args)
  File "/root/autodl-tmp/VideoDD/TzxDemo.py", line 308, in main
    loss = 1000 * cfloss(feat_tg, feat, t,args)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/autodl-tmp/VideoDD/NCFM.py", line 57, in forward
    t_x_real = calculate_real(torch.matmul(t, feat.t()))
                              ^^^^^^^^^^^^^^^^^^^^^^^^^
RuntimeError: mat1 and mat2 shapes cannot be multiplied (64x1024 and 512x1)
